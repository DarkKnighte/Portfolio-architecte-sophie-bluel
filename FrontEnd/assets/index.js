
const data = {
  works: [],
  categories: []
};

window.addEventListener("DOMContentLoaded", async () => {
  // On r√©cup√®re les ≈ìuvres et les cat√©gories depuis l'API qu'on stocke globalement dans l'objet data.
  data.works = await getWorks();
  data.categories = await getCategories();
  // On affiche les ≈ìuvres et les filtres de cat√©gories.
  renderWorks(data.works);
  const token = localStorage.getItem("token");
  if (!token && data.categories.length) {
    renderFilters(data.categories);
    } else {
    renderEditionMode();
  }
});

async function getWorks() {
  // Exemple de gestion d'erreur avec try {} catch {}
  try {
    const response = await fetch("http://localhost:5678/api/works");
    return await response.json();
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des ≈ìuvres", error);
    alert("Une erreur est survenue lors de la r√©cup√©ration des ≈ìuvres.")
  }
}

async function getCategories() {
  // Exemple de gestion d'erreur avec try {} catch {}
  try {
    const response = await fetch("http://localhost:5678/api/categories");
    // Exemple de gestion d'erreur avec if (response.ok) {} else {} avec une alerte pour l'utilisateur si le code de statut de la r√©ponse n'est pas 200-299.
    if (response.ok) {
      return await response.json();
    } else {
      alert("Une erreur est survenue lors de la r√©cup√©ration des cat√©gories.")
    }
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des cat√©gories", error);
    alert("Une erreur est survenue lors de la r√©cup√©ration des cat√©gories.")
  }
}

/**
* Affiche les filtres de cat√©gories et ajoute les √©couteurs d'√©v√©nements sur chacun d'entre eux.
* @param categories Liste des cat√©gories √† afficher en tant que filtres
*/
function renderFilters(categories) {
  const filters = document.querySelector(".filters");
  // Ajoute un bouton pour afficher toutes les ≈ìuvres, sans filtre.
  filters.innerHTML = `<button class="filter" data-category-id="0">Tous</button>`;
  // On it√®re sur les cat√©gories pour afficher un bouton par cat√©gorie.
  categories.forEach(category => {
    filters.innerHTML += `<button class="filter" data-category-id="${category.id}">${category.name}</button>`;
  });
  const buttons = document.querySelectorAll(".filter");
  // On ajoute un √©couteur d'√©v√©nement sur chaque bouton pour filtrer les ≈ìuvres.
  buttons.forEach(button => {
    button.addEventListener("click", () => {
      // On r√©cup√®re l'identifiant de la cat√©gorie √† filtrer depuis l'attribut data-category-id du bouton.
      const { categoryId } = button.dataset;
      // On filtre les ≈ìuvres en fonction de la cat√©gorie s√©lectionn√©e.
      const filteredWorks = filterWorks(data.works, Number(categoryId));
      // On affiche les ≈ìuvres filtr√©es.
      renderWorks(filteredWorks);
    })
  })
}

/**
* Affiche les ≈ìuvres dans la galerie
* @param works Liste des ≈ìuvres √† afficher
*/
function renderWorks(works) {
  console.log("Afficher les ≈ìuvres", works);
  const gallery = document.querySelector(".gallery");
  // On vide la galerie avant d'ajouter les nouvelles ≈ìuvres.
  gallery.innerHTML = "";
  // On it√®re sur les ≈ìuvres pour afficher une figure par ≈ìuvre.
  works.forEach(work => {
    document.querySelector(".gallery").innerHTML += `
    <figure>
      <img src="${work.imageUrl}" alt="${work.title}">
      <figcaption>${work.title}</figcaption>
    </figure>
  `;
  });
}

/**
 * Affiche les ≈ìuvres dans la galerie de la modale
 * @param works Liste des ≈ìuvres √† afficher
 */
function renderWorksInModal(works) {
  const gallery = document.querySelector(".modal-gallery");
  gallery.innerHTML = "";
  // @TODO: D√©finir le HTML pour chaque √©l√©ment (incluant la corbeille pour la suppression)
  works.forEach(work => {
    gallery.innerHTML += `
      <div>
        <div>@TODO : Afficher l'image pour chaque √©l√©ment.</div>
        <button class="delete" data-id="${work.id}">üóëÔ∏è</button>
      </div>
  `;
  });
  // G√®re la suppression d'une ≈ìuvre en cliquant sur la corbeille.
  const buttons = document.querySelectorAll(".delete");
  buttons.forEach((button, index) => {
    button.addEventListener("click", () => {
      deleteWork(Number(button.dataset.id)); // On convertit l'identifiant en nombre avant de le passer √† la fonction deleteWork.
    });
  });
}

/**
 * Affiche le mode √©dition
 */
function renderEditionMode() {
  // const edition = `<div class="modal">
  //       <h1>Mode √©dition</h1>
  //       <button id="edit">Editer</button>
  //     </div>`;
  // document.body.insertAdjacentHTML("afterbegin", edition);

  // @TODO : Afficher la banni√®re en haut de page.
  const banner = `<div class="banner">
    <i class="fa-regular fa-pen-to-square" style="color: #ffffff;"></i>
    <p id="banner-edit"> Mode √©dition</p>
    </div>`;
  document.body.insertAdjacentHTML("afterbegin", banner);
  // @TODO : Afficher le bouton pour ouvrir la modale au bon emplacement.

  const modal = document.querySelector("#modal");
  const editButton = document.querySelector("#edit");
  const quitButton = document.querySelector("#quit");

  editButton.addEventListener("click", (event) => {
    modal.showModal(); // Affiche la modal
    renderWorksInModal(data.works);
  });
  quitButton.addEventListener("click", (event) => {
    modal.close(); // Ferme la modal
  });

  // @TODO : Changer le texte "Login" √† "Logout" dans le header.
  document.getElementById("login");
  login.innerHTML = "Logout";
}

/**
* Filtrer les ≈ìuvres par cat√©gorie.
* @param works Liste des ≈ìuvres √† filtrer
* @param categoryId Identifiant de la cat√©gorie √† utiliser pour le filtrage
* @returns {[]} Liste des ≈ìuvres filtr√©es
*/
function filterWorks(works, categoryId) {
  if (categoryId === 0) {
    return works;
  }
  return works.filter(work => work.categoryId === categoryId);
}

function deleteWork(id) {
  // @TODO: Envoyer une requ√™te DELETE √† l'API pour supprimer l'≈ìuvre avec l'identifiant id et en utilisant le jeton d'authentification stock√© dans le localStorage.
  data.works = data.works.filter(work => work.id !== id); // On ne garde que les oeuvres dont l'identifiant est diff√©rent de celui √† supprimer.
  renderWorks(data.works); // On r√©affiche les oeuvres apr√®s la suppression.
  renderWorksInModal(data.works); // On r√©affiche les oeuvres dans la modale apr√®s la suppression.
}

// @TODO : Revoir le style g√©n√©ral.
// @TODO : Mettre en place le mode √©dition.
